import numpy as np

# Gauss Jacobi
def gauss_jacobi(A: np.array, b: np.array, x0: np.array, tol: float, max_iter: int)->np.array:
    # Validación
    if not isinstance(A, np.ndarray):
        A = np.array(A, dtype=float)
    assert A.shape[0] == A.shape[1], "La matriz A dede ser de tamaño n x n"
    
    if not isinstance(b, np.ndarray):
        b = np.array(b, dtype=float)
    assert b.shape[0] == A.shape[0], "El vector b debe ser de tamaño n"

    if not isinstance(x0, np.ndarray):
        x0 = np.array(x0, dtype=float)
    assert x0.shape[0] == A.shape[0], "El vector x0 debe ser de tamaño n"

    n = A.shape[0]
    x = x0.copy()
    for k in range(1, max_iter):
        x_new = np.zeros((n, 1))
        for i in range(n):
            suma = sum([A[i, j] * x[j] for j in range(n) if j != i])
            x_new[i] = (b[i] - suma) / A[i, i]

        if np.linalg.norm(x_new - x) < tol:
            return x_new

        x = x_new.copy()

    return x

# Gauss Seidel
def gauss_seidel(A: np.array, b: np.array, x0: np.array, tol: float, max_iter: int)->np.array:
    # Validación
    if not isinstance(A, np.ndarray):
        A = np.array(A, dtype=float)
    assert A.shape[0] == A.shape[1], "La matriz A dede ser de tamaño n x n"
    
    if not isinstance(b, np.ndarray):
        b = np.array(b, dtype=float)
    assert b.shape[0] == A.shape[0], "El vector b debe ser de tamaño n"

    if not isinstance(x0, np.ndarray):
        x0 = np.array(x0, dtype=float)
    assert x0.shape[0] == A.shape[0], "El vector x0 debe ser de tamaño n"

    n = A.shape[0]
    x = x0.copy()
    for k in range(1, max_iter):
        x_new = np.zeros((n, 1))
        for i in range(n):
            suma = sum([A[i, j] * x_new[j] for j in range(i) if j != i]) + sum(
               [A[i, j] * x[j] for j in range(i, n) if j != i]
            )
            x_new[i] = (b[i] - suma) / A[i, i]

        if np.linalg.norm(x_new - x) < tol:
            return x_new

        x = x_new.copy()

    return x

# Definimos el array de coeficientes
# A = [[4, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
#     [-1, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, -1, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, -1, 4, 0, -1, 0, 0, 0, 0, 0, 0],
#     [-1, 0, 0, 0, 4, 0, -1, 0, 0, 0, 0, 0],
#     [0, 0, 0, -1, 0, 4, 0, -1, 0, 0, 0, 0],
#     [0, 0, 0, 0, -1, 0, 4, 0, -1, 0, 0, 0],
#     [0, 0, 0, 0, 0, -1, 0, 4, 0, 0, 0, -1],
#     [0, 0, 0, 0, 0, 0, -1, 0, 4, -1, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, -1, 4, -1, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 4, -1],
#     [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 4],]

# Definimos el vector de constantes
# b = np.array([220, 110, 110, 220, 110, 110, 
#               110, 110, 220, 110, 110, 220])

# Aproximación inicial
# x0 = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

# Tolerancia
# tol = 10e-2

# Máximas iteraciones
# max_iter = 10

# Llamar la función
# x = gauss_jacobi(A, b, x0, tol, max_iter)
# print(x)

# Definimos el array de coeficientes
# A = [[4, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
#     [-1, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, -1, 4, -1, 0, 0, 0, 0, 0, 0, 0, 0],
#     [0, 0, -1, 4, 0, -1, 0, 0, 0, 0, 0, 0],
#     [-1, 0, 0, 0, 4, 0, -1, 0, 0, 0, 0, 0],
#     [0, 0, 0, -1, 0, 4, 0, -1, 0, 0, 0, 0],
#     [0, 0, 0, 0, -1, 0, 4, 0, -1, 0, 0, 0],
#     [0, 0, 0, 0, 0, -1, 0, 4, 0, 0, 0, -1],
#     [0, 0, 0, 0, 0, 0, -1, 0, 4, -1, 0, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, -1, 4, -1, 0],
#     [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 4, -1],
#     [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, -1, 4],]

# Definimos el vector de constantes
# b = np.array([220, 110, 110, 220, 110, 110, 
#               110, 110, 220, 110, 110, 220])

# Aproximación inicial
# x0 = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

# Tolerancia
# tol = 10e-2

# Máximas iteraciones
# max_iter = 10

# Llamar la función
# x = gauss_seidel(A, b, x0, tol, max_iter)
# print(x)
