------------- Ejercicio 2.a -------------

from scipy.optimize import newton

iteration_count = 0

def f(x):
    global iteration_count
    iteration_count += 1
    print(f"Iteración {iteration_count}: x = {x}")
    return x**3 - 2*x**2 - 5

def fprime(x):
    return 3*x**2 - 4*x

iteration_count = 0

root, results = newton(func=f, x0=1, fprime=fprime, tol=1e-4, full_output=True)

print(f"Root: {root}")
print(f"Results: {results}")

------------- Ejercicio 3 y 4 -------------

Gráfico

import numpy as np

import matplotlib.pyplot as plt

def equation(x:float)->float:
    return 230*x**4 + 18*x**3 + 9*x**2 - 221*x - 9

# Generate x values
x = np.linspace(-10, 10, 100)

# Calculate y values
y = equation(x)

# Plot the equation
plt.plot(x, y)

plt.xlabel('x')
plt.ylabel('y')
plt.title('Gráfico')
ax = plt.gca()
ax.set_ylim([-5, 5])
ax.set_xlim([-3, 3])
plt.grid(True)
plt.show()

Método Newton

from scipy.optimize import newton
import numpy as np

iteration_count = 0

def f(x):
    global iteration_count
    iteration_count += 1
    print(f"Iteración {iteration_count}: x = {x}")
    return 230*x**4 + 18*x**3 + 9*x**2 - 221*x - 9

def fprime(x):
    return 920*x**3 + 54*x**2 + 18*x - 221

iteration_count = 0

root, results = newton(func=f, x0=0.5, fprime=fprime, tol=1e-6, full_output=True)

print(f"Root: {root}")
print(f"Results: {results}")

Método Secante

from scipy.optimize import newton
import numpy as np

iteration_count = 0

def f(x):
    global iteration_count
    iteration_count += 1
    print(f"Iteración {iteration_count}: x = {x}")
    return 230*x**4 + 18*x**3 + 9*x**2 - 221*x - 9

iteration_count = 0

root, results = newton(func=f, x0=0, x1=1, tol=1e-6, full_output=True)

print(f"Root: {root}")
print(f"Results: {results}")

------------- Ejercicio 5 -------------

Método Bisección

import numpy as np
from typing import Callable
def sign(x: float) -> int:
    if x > 0:
        return 1
    elif x < 0:
        return -1
    else:
        return 0

def bisection(
    a: float, b: float, *, equation: Callable[[float], float], tol: float, N: int
) -> tuple[float, float, float, int] | None:
    i = 1

    # Input validation
    # Comente a continuación y vea qué sucede
    assert a < b, "a not lower than b, the interval is not valid."

    # Comente a continuación y vea qué sucede
    assert (
        equation(a) * equation(b) < 0
    ), "The function does not change sign over the interval."

    Fa = equation(a)
    p = a # to avoid crash in i == 0.
    for i in range(N):

        # esta alternativa es suceptible de desborde, especialmente si a y b son muy grandes
        # p = (a + b)/2

        p = a + (b - a) / 2
        FP = equation(p)
        if FP == 0 or (b - a) / 2 < tol:
            return p, a, b, i

        if sign(Fa) * sign(FP) > 0:

            # esta alternativa podría causar también un desborde
            # if Fa * FP > 0:

            a = p
            Fa = FP
        else:
            b = p

    # Respuesta temporal
    return p, a, b, i

    # Es mejor usar esta opción, cuando el algoritmo no llega a una tolerancia en
    # las iteraciones dadas.

    # raise ValueError(
    #     "Solution not found within the given tolerance and number of iterations"
    # )

# Prueba
def equation (x):
  return np.tan(np.pi*x) - 6
# Parámetros del método de bisección
a = 0
b = 0.48
tol = 1e-2
N = 10

# Llamar a la función de bisección
resultado = bisection(a, b, equation=equation, tol=tol, N=N)

if resultado is not None:
    p, a_final, b_final, iteraciones = resultado
    print(f"La raíz en el intervalo [{a}, {b}] es: {p}")
    print(f"Intervalo final: [{a_final}, {b_final}]")
    print(f"Número de iteraciones: {iteraciones + 1}")
else:
    print("No se encontró una solución dentro de la tolerancia y número de iteraciones dados")

Método Newton

from scipy.optimize import newton
import numpy as np

iteration_count = 0

def f(x):
    global iteration_count
    iteration_count += 1
    print(f"Iteración {iteration_count}: x = {x}")
    return np.tan(np.pi*x) - 6

def fprime(x):
    return np.pi * (1 / np.cos(np.pi * x)**2)

iteration_count = 0

root, results = newton(func=f, x0=0, fprime=fprime, tol=1e-2, full_output=True, maxiter=10)

print(f"Root: {root}")
print(f"Results: {results}")

Método Secante

from scipy.optimize import newton
import numpy as np

iteration_count = 0

def f(x):
    global iteration_count
    iteration_count += 1
    print(f"Iteración {iteration_count}: x = {x}")
    return np.tan(np.pi*x) - 6

iteration_count = 0

root, results = newton(func=f, x0=0, x1=0.48, tol=1e-2, full_output=True, maxiter=10)

print(f"Root: {root}")
print(f"Results: {results}")

------------- Ejercicio 6 -------------

from scipy.optimize import newton
import numpy as np

iteration_count = 0

def f(x):
    global iteration_count
    iteration_count += 1
    print(f"Iteración {iteration_count}: x = {x}")
    return np.log(x**2 + 1) - np.exp(0.4*x) * np.cos(np.pi*x)

iteration_count = 0

root, results = newton(func=f, x0=24, x1=25, tol=1e-6, full_output=True)

print(f"Root: {root}")
print(f"Results: {results}")

------------- Ejercicio 7 -------------

Método Secante

from scipy.optimize import newton
import numpy as np

iteration_count = 0

def f(x):
    global iteration_count
    iteration_count += 1
    print(f"Iteración {iteration_count}: x = {x}")
    return x**(1/3)

iteration_count = 0

root, results = newton(func=f, x0=5, x1=0.5, full_output=True)

print(f"Root: {root}")
print(f"Results: {results}")

Método Newton

from scipy.optimize import newton
import numpy as np

iteration_count = 0

def f(x):
    global iteration_count
    iteration_count += 1
    print(f"Iteración {iteration_count}: x = {x}")
    return x**(1/3)

def fprime(x):
    return (1/3) * x**(-2/3)

iteration_count = 0

root, results = newton(func=f, x0=5, fprime=fprime, full_output=True)

print(f"Root: {root}")
print(f"Results: {results}")
